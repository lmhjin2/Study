@decorator

데코레이터는 파이썬에서 함수나 메소드의 기능을 변경하거나 확장하는데 사용됨
다른 함수를 인자로 받아들여 해당 함수의 행동을 변경

함수를 다른 함수로 싸서 그 함수에 새로운 기능을 추가하거나, 사전 / 사후 처리를 할 수 있게 함
보통은 wrapper 함수를 포함하지만 없어도 문제없음 ( 이름이 달라도 됨 )
코드를 추가, 변경하지 않고 새 함수 기능을 넣어줄 수 있음

코드 중복을 줄이고 가독성과 유지 보수를 용이하게 해줌.


@abstract method ( 추상 메소드 )

자식 클래스에서 반드시 오버라이딩(구현) 해야만 사용할 수 있는 메소드를 의미함
= 자식 클래스에서는 추상 클래스를 상속받고, 추상 메서드를 반드시 구현 해야함

예시)
class TimestepBlock(nn.Module):

    @abstractmethod
    def forward(self, x, emb):
이렇게 되어있으면 TimstepBlock을 상속받은 클래스는 반드시 def forward(self, x, emb)를 ()안의 인자도 포함한채로 정의해줘야 한다. 


사용법
데코레이터를 정의 후 함수 정의 바로 위에 위치

예시 )
def decorator():
    ~~
    ~~

@decorator
def function():
    ~~
    ~~




