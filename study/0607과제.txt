Revolutionizing Mental Health Care through LangChain: 
A Journey with a Large Language Model
https://arxiv.org/abs/2403.05568

* 과제
model.train()과
model.eval()의 차이

loss.backward()
optimizer.step()

torch.no_grad() 

이게 다 뭐고, 왜 해야 하는지

nn.Module을 상속 받을때 __init__, super(), forward() 
얘네가 어떻게 구성되는지

===============================================

model.train(), model.eval()
pytorch에서 쓰이는 메서드
훈련모드와 평가모드
기본값은 훈련모드 model.train() 
훈련모드 에서는 opout과 normalization같은 레이어들이 작동함

model.eval() 은 평가모드
dropout과 normalization같은 레이어들이 작동 안함

with torch.no_grad()
평가모드 에서는 with torch.no_grad()를 같이 쓰며, 
그라디언트 계산을 비활성화 하여 메모리 사용량을 줄이고 평가 속도를 높임
평가시에는 파라미터를 업데이트할 필요가 없으므로 그라디언트 또한 필요가 없음

loss.backward()
역전파 과정을 수행해 손실(loss)에 대한 각 파라미터의 gradient를 계산 및 저장
파라미터 업데이트에 사용됨

optimizer.step()
옵티마이저가 모델의 파라미터를 업데이트하는 단계
각 파라미터에 대해 저장된 그라디언트를 사용해 파라미터를 업데이트함
w = w - lr * ∂L/∂w

optimizer.zero_grad()
호출하여 그래디언트를 0으로 초기화 함
하지 않으면 이전 배치의 그라디언트가 누적되어 학습에 좋지 않음
pytorch는 기본적으로 새로운 그라디언트를 기존 그라디언트에 더해주기 때문

​
__init__() :
__init__메서드는 클래스가 초기화 될 때 호출되는 생성자 메서드
모델의 레이어들을 정의하는 부분
super().__init__()을 호출해서 부모 클래스 (nn.Module)의 초기화 메서드 호출
nn.Module 이 내부적으로 사용하는 속성들을 초기화 시키는데에 필요함

super().__init__() : 
super는 부모 클래스의 메서드를 호출하는 데 사용됨.
nn.Module의 __init__을 호출하고, nn.Module이 내부적으로 수행해야 하는
초기화 작업을 완료하게 함
이를 통해 모델 클래스가 nn.Module의 모든 기능을 사용할 수 있게 되고
올바른 파라미터 추적과 업데이트가 가능해짐
super()를 호출하지 않으면, nn.Module의 기본 기능들이 제대로 설정되지 않아
모델이 올바르게 작동하지 않을 수 있음

forward() : 
forward 메서드는 모델의 순전파연산을 정의함.
입력 데이터를 받아서 출력으로 변환하는 과정을 정의함


__init__에서는 모델의 구조를 정의하고, forward에서는 데이터가 모델을 통과하는 방식을 정의하며, super를 통해 부모 클래스의 초기화(__init__)를 호출함












 





